#!/usr/bin/env python3

"""
Parse the documentation api.yml files to various outputs.

Example:

    find ./api -name api.yml |
    ./bin/parse-api-yml-to-outputs/parse-api-yml-to-outputs

Logging is supported such as:

    export LOGLEVEL=INFO

Or via command line:

    LOGLEVEL=INFO parse-api-yml-to-outputs
"""

import argparse
import logging
import os
import pprint
import sys
import yaml_with_include as yaml
from pathlib import Path

from package import Package
from entity import Entity
from attribute_group import AttributeGroup
from attribute import Attribute

import render

parser = argparse.ArgumentParser(
    prog='parse-api-yml-to-outputs',
    description='Parse the documentation api.yml files to various outputs.',
    epilog='For help contact joel@joelparkerhenderson.com'
)
parser.add_argument("-w", "--write", help="Write outputs to their respective files.", action=argparse.BooleanOptionalAction)
parser.add_argument("paths", nargs='*')
args = parser.parse_args()

def banner(s):
    return f"\n\n###########################################\n#\n#  " + s + "\n#\n###########################################\n\n"

def parse_path(path: os.PathLike):
    """
    Parse path to a project API file e.g. "./api/user/api.yml"
 
    Args:
        path (path): The path to parse e.g. "./api/user/api.yml"

    Outputs:
        api.md (markdown file)
        uml.plantuml (UML PlantUML file)
        postgres-migration-up.sql
        postgres-migration-down.sql
        ruby-on-rails-generate.sh (Ruby On Rails generator file)
    """
    dirname = os.path.dirname(path) # e.g. "./api/user"
    concept = os.path.basename(dirname) # e.g. "user"

    with open(path, 'r') as file:

        y = yaml.load(file)
        print(banner(f"YAML {concept}") + yaml.dump(y, indent=2, default_flow_style=False, sort_keys=False))
        logging.info(banner(f"YAML {concept}") + yaml.dump(y, indent=2, default_flow_style=False, sort_keys=False))

        entities = Entity.parse(y)
        for entity in entities:
            logging.info(banner(f"Entity {entity}"))

        # s = render.loco_generate_scaffold_html.render(entities)
        # print(banner(f"render loco generate scaffold html {concept}") + s)
        # if args.write:
        #     print('write: ', dirname + 'loco-generate-scaffold.sh')

        # s = render.markdown.render(entities)
        # print(banner(f"render markdown {concept}") + s)
        # if args.write:
        #     f = open(dirname + '/api.md', 'w')
        #     f.write(s)
        #     f.close()

        # s = render.plantuml.render(entities)
        # print(banner(f"render plantuml {concept}") + s)
        # if args.write:
        #     f = open(dirname + '/uml.plantuml', 'w')
        #     f.write(s)
        #     f.close()

        # s = render.postgres_migration_up.render(entities)
        # print(banner(f"render postgres migration up {concept}") + s)
        # if args.write:
        #     print('write: ', dirname + '/postgres-migrate-up.sql')

        # s = render.postgres_migration_down.render(entities)
        # print(banner(f"render postgres migration down {concept}") + s)
        # if args.write:
        #     print('write: ', dirname + '/postgres-migrate-down.sql')

        # s = render.phoenix_generate().render(entities)
        # print(banner(f"render phoenix generate {concept}") + s)
        # if args.write:
            # print('write: ', dirname + '/api-phoenix-generate.sh')

        s = render.rails_generate_scaffold.render(entities)
        print(banner(f"rails generate scaffold {concept}") + s)
        if args.write:
            print('write: ', dirname + '/api-rails-generate-scaffold.sh')

def main():
    # logging.basicConfig(level=os.environ.get("LOGLEVEL", "WARN"))
    if args.paths:
        for path in args.paths:
            parse_path(path)
    else:
        for line in sys.stdin:
            parse_path(line.rstrip('\n'))

if __name__ == "__main__":
    print("parse-api-yml-to-outputs")
    main()
