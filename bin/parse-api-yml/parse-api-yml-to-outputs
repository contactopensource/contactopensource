#!/usr/bin/env python3

"""
Parse the documentation api.yml files to various outputs.

Syntax can use args or stdin:

    parse-api-yml-to-outputs path...

    path... | parse-api-yml-to-outputs

Examples:

    ./bin/parse-api-yml/parse-api-yml-to-outputs ./api/person/api.yml

    find ./api -name api.yml | ./bin/parse-api-yml/parse-api-yml-to-outputs

Writing output is supported such as:

    ./bin/parse-api-yml/parse-api-yml-to-outputs --write ./api/person/api.yml

    find ./api -name api.yml | ./bin/parse-api-yml/parse-api-yml-to-outputs --write

Logging is supported such as:

    export LOGLEVEL=INFO

Or via command line:

    LOGLEVEL=INFO parse-api-yml-to-outputs

All together:

    LOGLEVEL=INFO ./bin/parse-api-yml/parse-api-yml-to-outputs --write ./api/person/api.yml

    find ./api -name api.yml | LOGLEVEL=INFO ./bin/parse-api-yml/parse-api-yml-to-outputs --write

"""

import argparse
import logging
import os
import pprint
import sys
import yaml_with_include as yaml
from pathlib import Path

from package import Package
from entity import Entity
from attribute_group import AttributeGroup
from attribute import Attribute

import render

parser = argparse.ArgumentParser(
    prog='parse-api-yml-to-outputs',
    description='Parse the documentation api.yml files to various outputs.',
    epilog='For help contact joel@joelparkerhenderson.com'
)
parser.add_argument("-w", "--write", help="Write outputs to their respective files.", action=argparse.BooleanOptionalAction)
parser.add_argument("paths", nargs='*')
args = parser.parse_args()

def banner(s):
    return f"\n\n###########################################\n#\n#  " + s + "\n#\n###########################################\n\n"

def parse_path(path: os.PathLike):
    """
    Parse path to a project API file e.g. "./api/person/api.yml"

    Args:
        path (path): The path to parse e.g. "./api/person/api.yml"

    Outputs:
        index.md (markdown file)
        bin/django-model.py (Django model file)
        bin/loco-generate-scaffold-html.sh (Loco.rs generate scaffold HTML file)
        bin/postgres-migration-up.sql
        bin/postgres-migration-down.sql
        bin/ruby-on-rails-generate.sh (Ruby On Rails generator file)
        uml/uml.plantuml (UML PlantUML file)
    """
    logging.info(banner(path))
    dirname = os.path.dirname(path) # e.g. "./api/user"
    concept = os.path.basename(dirname) # e.g. "user"

    with open(path, 'r') as file:
        y = yaml.load(file)
        logging.debug(f"parse_path path: {path}, concept: {concept}, yaml.dump: " + yaml.dump(y, indent=2, default_flow_style=False, sort_keys=False))
        entities = Entity.parse(y)
        for entity in entities:
            logging.info(banner(f"{entity.id}"))

        for renderer in [
            render.ash,
            render.django_model,
            render.loco_generate_scaffold_html,
            render.markdown,
            render.plantuml,
            render.postgres_migration_up,
            render.postgres_migration_down,
            render.phoenix_generate,
            render.rails_generate_scaffold,
        ]:
            s = renderer.render(entities)
            logging.info(banner(f"{concept} {renderer.__name__}") + s)
            if args.write:
                with open(os.path.join(dirname, renderer.output_path()), "w") as f:
                    f.write(s)
                    # TODO chmod

def main():
    logging.basicConfig(level=os.environ.get("LOGLEVEL", "WARN"))
    logging.info("main()")
    if args.paths:
        for path in args.paths:
            parse_path(path)
    else:
        for line in sys.stdin:
            parse_path(line.rstrip('\n'))

if __name__ == "__main__":
    main()
