#!/usr/bin/env python3

"""
Parse the documentation api.yml files to various outputs.

Example:

    find api -name api.yml |
    parse-api-yml-to-outputs

Logging is supported such as:

    export LOGLEVEL=INFO

Or via command line:

    LOGLEVEL=INFO parse-api-yml-to-outputs
"""

import logging
import os
import pprint
import sys
import yaml

from package import Package
from entity import Entity
from attribute import Attribute

from render_abstract import RenderAbstract
from render_markdown import RenderMarkdown
from render_plantuml import RenderPlantUML
from render_rails_generator import RenderRailsGenerator
from render_postgres_migration_up import RenderPostgresMigrationUp
from render_postgres_migration_down import RenderPostgresMigrationDown

def parse_packages(y):
    """
    Parse packages.

    Args:
        y: the packages yaml.
    """
    if y is None:
        return None
    return list(map(parse_package_kv, y.items()))

def parse_package_kv(kv):
    """
    Parse package key-value pair.

    Args:
        kv: the package key-value pair.
    """
    if kv is None:
        return None
    return parse_package(*kv)

def parse_package(id, y):
    """
    Parse package.

    Args:
        id: the package id.
        y: the package yaml.
    """
    if y is None:
        return None
    return Package(
        id, 
        y.get('summary', None)
    )

def parse_entities(y):
    """
    Parse entities.

    Args:
        y: The entities yaml.
    """
    if y is None:
        return None
    return list(map(parse_entity_kv, y.items()))

def parse_entity_kv(kv):
    """
    Parse entity key-value pair.

    Args:
        kv: The entity key-value pair.
    """
    if kv is None:
        return None
    return parse_entity(*kv)

def parse_entity(id, y):
    """
    Parse entity.

    Args:
        id: The entity id.
        y: The entity yaml.
    """
    if y is None:
        return None
    return Entity(
        id, 
        y.get('summary', None), 
        parse_attributes(y.get('attributes', None)),
        y.get('uml', None)
    )

def parse_attributes(y):
    """
    Parse attributes.

    Args:
        y: The attributes yaml.
    """
    if y is None:
        return None
    return list(map(parse_attribute_kv, y.items()))

def parse_attribute_kv(kv):
    """
    Parse attribute key-value pair.

    Args:
        kv: The attribute key-value pair.
    """
    if kv is None:
        return None
    return parse_attribute(*kv)

def parse_attribute(id, y):
    """
    Parse attribute id and YAML.

    Args:
        id: The attribute id.
        y: The attribute yaml.
    """
    if y is None:
        return None
    return Attribute(
        id, 
        y.get('type', None), 
        y.get('index', False), 
        y.get('example', None), 
        y.get('uml', None)
    )

def parse_path(path: os.PathLike):
    """
    Parse path to a project API file e.g. "./api/user/api.yml"
 
    Args:
        path (path): The path to parse e.g. "./api/user/api.yml"

    Outputs:
        api.md (markdown file)
        uml.plantuml (UML PlantUML file)
        postgres-migration-up.sql
        postgres-migration-down.sql
        ruby-on-rails-generate.sh (Ruby On Rails generator file)
    """
    dirname = os.path.dirname(path) # e.g. "./api/user"
    concept = os.path.basename(dirname) # e.g. "user"
    logging.info(f"parse_path {path} {dirname} {concept}")

    with open(path, 'r') as file:
        y = yaml.safe_load(file)
        logging.info(f"\n\n###########################################\n\nYAML {concept}\n\n" + yaml.dump(y, indent=2, default_flow_style=False, sort_keys=False))

        entities = parse_entities(y)
        for entity in entities:
            logging.info(f"\n\n###########################################\n\nEntity {entity}\n\n")

        s = RenderMarkdown.run(entities)
        logging.info(f"\n\n###########################################\n\nRenderMarkdown {concept}\n\n" + s)

        s = RenderPlantUML.run(entities)
        logging.info(f"\n\n###########################################\n\nRenderPlantUML {concept}\n\n" + s)

        s = RenderRailsGenerator.run(entities)
        logging.info(f"\n\n###########################################\n\nRails Generator {concept}\n\n" + s)

        s = RenderPostgresMigrationUp.run(entities)
        logging.info(f"\n\n###########################################\n\nRenderPostgresMigrationUp {concept}\n\n" + s)

        s = RenderPostgresMigrationDown.run(entities)
        logging.info(f"\n\n###########################################\n\nRenderPostgresMigrationDown {concept}\n\n" + s)

def main():
    logging.basicConfig(level=os.environ.get("LOGLEVEL", "INFO"))
    for line in sys.stdin:
        parse_path(line.rstrip('\n'))

if __name__ == "__main__":
    main()
