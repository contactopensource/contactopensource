#!/usr/bin/env python3
import sys
import yaml

from package import Package
from entity import Entity
from attribute import Attribute

from render_abstract import RenderAbstract
from render_markdown import RenderMarkdown
from render_plantuml import RenderPlantUML
from render_rails_generator import RenderRailsGenerator
from render_postgres_migration_up import RenderPostgresMigrationUp
from render_postgres_migration_down import RenderPostgresMigrationDown

def parse_attribute(id, y):
    return Attribute(id, y['type'], y.get('index', False), y['example'], y.get('uml', None))

def parse_attribute_kv(kv):
    return parse_attribute(*kv)

def parse_attributes(y):
    return list(map(parse_attribute_kv, y.items()))
    
def parse_entity(id, y):
    return Entity(id, y['summary'], parse_attributes(y['attributes']), y.get('uml', None))

def parse_entity_kv(kv):
    return parse_entity(*kv)

def parse_entities(y):
    return list(map(parse_entity_kv, y.items()))

def parse_package(id, y):
    return Package(id, y['summary'])

def parse_package_kv(kv):
    return parse_package(*kv)

def parse_packages(y):
    return list(map(parse_package_kv, y.items()))

y = yaml.safe_load(sys.stdin.read())
#print(yaml.dump(y, indent=2, default_flow_style=False, sort_keys=False))
entities = parse_entities(y)

s = RenderMarkdown.run(entities)
s = RenderPlantUML.run(entities)
s = RenderRailsGenerator.run(entities)
s = RenderPostgresMigrationUp.run(entities)

print(s.strip())
