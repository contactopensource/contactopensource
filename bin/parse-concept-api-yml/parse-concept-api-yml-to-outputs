#!/usr/bin/env python3
import pprint
import re
import sys
import yaml

from render_markdown import RenderMarkdown
from render_plantuml import RenderPlantUML
from render_rails_generator import RenderRailsGenerator
from render_sql import RenderSQL

class Package:
    def __init__(self, id, summary, entities, uml = None):
        self.id = id
        self.summary = summary
        self.entities = entities
        self.uml = uml

class Entity:
    def __init__(self, id, summary, attributes, uml = None):
        self.id = id
        self.summary = summary
        self.attributes = attributes
        self.uml = uml

class Attribute:
    def __init__(self, id, type, index, example, uml = None):
        self.id = id
        self.type = type
        self.index = index
        self.example = example
        self.uml = uml

    def use_join(self):
        return self.type.__contains__("(id)")

    def use_index(self):
        return self.index or self.use_join()

def parse_attribute(id, y):
    return Attribute(id, y['type'], y.get('index', False), y['example'], y.get('uml', None))

def parse_attribute_kv(kv):
    return parse_attribute(*kv)

def parse_attributes(y):
    return list(map(parse_attribute_kv, y.items()))
    
def parse_entity(id, y):
    return Entity(id, y['summary'], parse_attributes(y['attributes']), y.get('uml', None))

def parse_entity_kv(kv):
    return parse_entity(*kv)

def parse_entities(y):
    return list(map(parse_entity_kv, y.items()))

def parse_package(id, y):
    return Package(id, y['summary'])

def parse_package_kv(kv):
    return parse_package(*kv)

def parse_packages(y):
    return list(map(parse_package_kv, y.items()))

y = yaml.safe_load(sys.stdin.read())
#print(yaml.dump(y, indent=2, default_flow_style=False, sort_keys=False))
entities = parse_entities(y)

#print(RenderMarkdown.entities(entities))
#print(RenderPlantUML.entities(entities))
#print(RenderRailsGenerator.entities(entities))
print(RenderSQL.entities(entities))
