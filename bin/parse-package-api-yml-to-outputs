#!/usr/bin/env python3
import pprint
import re
import sys
import yaml

class Package:
    def __init__(self, id, summary, entities, uml = None):
        self.id = id
        self.summary = summary
        self.entities = entities
        self.uml = uml

class Entity:
    def __init__(self, id):
        self.id = id

class RenderMarkdown:

    @classmethod
    def package(cls, package):
        s = f"# {package.id}\n\n"
        s += f"{package.summary} \n\n"
        s += f"Entities:\n\n"
        for entity in package.entities:
            s += cls.entity(entity)
        return s

    @classmethod
    def entity(cls, entity):
        s = f"* {entity.id}\n\n"
        return s

class RenderPlantUML:

    @classmethod
    def package(cls, package):
        s = f"package {package.id} " + "{\n"
        for entity in package.entities:
            s += cls.entity(entity)
        s += "}\n"
        if package.uml:
            s += f"\n{package.uml}\n"
        return s

    @classmethod
    def entity(cls, entity):
        s = f"  entity {entity.id}\n"
        return s

def parse_entity(id):
    return Entity(id)

def parse_entities(y):
    return list(map(parse_entity, list(y)))
    
def parse_package(id, y):
    return Package(id, y['summary'], parse_entities(y['entities']), y.get('uml', None))
    
def parse_package_kv(kv):
    return parse_package(*kv)

def parse_packages(y):
    return list(map(parse_package_kv, y.items()))

def print_markdown(packages):
    for package in packages:
        print(RenderMarkdown.package(package))

def print_plantuml(entities):
    print("@startuml uml")
    print("skinparam monochrome true")
    print("skinparam linetype ortho")
    print("hide circle")
    print()
    for package in packages:
        print(RenderPlantUML.package(package))
    print("@enduml")

y = yaml.safe_load(sys.stdin.read())
print(yaml.dump(y, indent=2, default_flow_style=False, sort_keys=False))
packages = parse_packages(y)

print_markdown(packages)
print_plantuml(packages)
