#!/usr/bin/env python3
import pprint
import re
import sys
import yaml

class Package:
    def __init__(self, id, summary, entities, uml = None):
        self.id = id
        self.summary = summary
        self.entities = entities
        self.uml = uml

class Entity:
    def __init__(self, id, summary, attributes, uml = None):
        self.id = id
        self.summary = summary
        self.attributes = attributes
        self.uml = uml

class Attribute:
    def __init__(self, id, type, index, example, uml = None):
        self.id = id
        self.type = type
        self.index = index
        self.example = example
        self.uml = uml

    def use_join(self):
        return self.type.__contains__("(id)")

    def use_index(self):
        return self.index or self.use_join()

class RenderMarkdown:

    @classmethod
    def package(cls, package):
        s = f"# {package.id}\n\n"
        s += f"{package.summary} \n\n"
        s += f"Entities:\n\n"
        for entity in package.entities:
            s += cls.entity_id(entity)
        return s

    @classmethod
    def entity_id(cls, entity):
        s = f"# {entity.id}\n\n"
        return s

    @classmethod
    def entity(cls, entity):
        s = f"# {entity.id}\n\n"
        s += f"{entity.summary} \n\n"
        s += f"Attributes:\n\n"
        for attribute in entity.attributes:
            s += cls.attribute(attribute)
        return s

    @classmethod
    def attribute(cls, attribute):
        return f"* {attribute.id}: {attribute.type}{cls.attribute_index(attribute)} -- example: {attribute.example}\n\n"

    @classmethod
    def attribute_index(cls, attribute):
        return "+" if attribute.use_index() else ""

class RenderPlantUML:

    @classmethod
    def package(cls, package):
        s = f"package {package.id} " + "{\n"
        for entity in package.entities:
            s += cls.entity_id(entity)
        s += "}\n"
        if package.uml:
            s += f"\n{package.uml}\n"
        return s

    @classmethod
    def entity(cls, entity):
        s = f"entity {entity.id} " + "{\n"
        for attribute in entity.attributes:
            s += cls.attribute(attribute)
        s += "}\n"
        if entity.uml:
            s += f"\n{entity.uml}\n"
        return s

    @classmethod
    def attribute(cls, attribute):
        return f"  {attribute.id} : {attribute.type}{cls.attribute_index(attribute)}\n"

    @classmethod
    def attribute_index(cls, attribute):
        return "+" if attribute.use_index() else ""

class RenderRailsGenerator:

    @classmethod
    def package(cls, package):
        return ""

    @classmethod
    def entity(cls, entity):
        s = "rails generate scaffold \\\n"
        s += f"{entity.id} \\\n"
        s += "$RAILS_GENERATE_SCAFFOLD_FIELDS_BEFORE \\\n"
        for attribute in entity.attributes:
            s += cls.attribute(attribute)
        s += "$RAILS_GENERATE_SCAFFOLD_FIELDS_AFTER\n"
        return s

    @classmethod
    def attribute(cls, attribute):
        return f"{attribute.id}:{cls.attribute_type(attribute)}{cls.attribute_index(attribute)} \\\n"

    @classmethod
    def attribute_type(cls, attribute):
        if attribute.use_join():
            return "references"
        # Search for a type with a constraint e.g. "string(1)"
        x = re.search("(string)\((\d+)\)", attribute.type)
        if x:
            # Return a quoted type and curly constraint e.g. "\"string{1}\""
            return "\"{}{{{}}}\"".format(x.group(1), x.group(2))
        return attribute.type

    @classmethod
    def attribute_index(cls, attribute):
        return ":index" if attribute.use_index() else ""

def parse_attribute(id, y):
    return Attribute(id, y['type'], y.get('index', False), y['example'], y.get('uml', None))

def parse_attribute_kv(kv):
    return parse_attribute(*kv)

def parse_attributes(y):
    return list(map(parse_attribute_kv, y.items()))
    
def parse_entity(id, y):
    return Entity(id, y['summary'], parse_attributes(y['attributes']), y.get('uml', None))

def parse_entity_kv(kv):
    return parse_entity(*kv)

def parse_entities(y):
    return list(map(parse_entity_kv, y.items()))

def parse_package_kv(kv):
    return parse_package(*kv)

def parse_packages(y):
    return list(map(parse_package_kv, y.items()))

def print_markdown(entities):
    for entity in entities:
        print(RenderMarkdown.entity(entity))

def print_rails_generator(entities):
    print("#!/bin/sh")
    print("set -euf")
    print()
    for entity in entities:
        print(RenderRailsGenerator.entity(entity))

def print_plantuml(entities):
    print("@startuml uml")
    print("skinparam monochrome true")
    print("skinparam linetype ortho")
    print("hide circle")
    print()
    for entity in entities:
        print(RenderPlantUML.entity(entity))
    print("@enduml")

y = yaml.safe_load(sys.stdin.read())
#print(yaml.dump(y, indent=2, default_flow_style=False, sort_keys=False))
entities = parse_entities(y)

print_markdown(entities)
print_rails_generator(entities)
print_plantuml(entities)
