#!/bin/sh
set -euf

class PlanSMART(models.Model):
        id = models.UUIDAttribute("Primary key id that is a secure-random 32-character lowercase hexadecimal, optimized for zero information rather than speed and memory; you can show this id to users.")
        lock_version = models.IntegerAttribute("This is for optimistic locking.")
        created_at = models.UnknownAttribute("The time when this happened.")
        created_by = models.URLAttribute("The user/agent/service/etc. that did this.")
        updated_at = models.UnknownAttribute("The time when this happened.")
        updated_by = models.URLAttribute("The user/agent/service/etc. that did this.")
        retired_at = models.UnknownAttribute("The time when this happened.")
        retired_by = models.URLAttribute("The user/agent/service/etc. that did this.")
        locale_code = models.TextAttribute("An international locale identifier, such as the id of locale "English - United States".")
        tagging = models.TextAttribute("A tagging list that is space-separated and without any hash marks.")
        name = models.UnknownAttribute("The card name a.k.a. card title, typically displayed in large font size on the card, such as a H1 headline, or a person's name.")
        subname = models.UnknownAttribute("The card subname a.k.a. card subtitle, typically displayed medium font size on the card, such as a H2 headline, or a person's handle.")
        summary = models.UnknownAttribute("None")
        description = models.TextAttribute("None")
        disambiguation = models.TextAttribute("None")
        sign = models.UnknownAttribute("An option one-character sign, such as an emoji indicator.")
        kind = models.TextAttribute("A category class, such as a useful way to sort or subset the resource.")
        avatar_image_400x400_url = models.URLAttribute("An avatar image for the item, 400x400 pixels, which is square 1:1 aspect ratio and the same size as other popular social networks, and will look good within a circle mask, as a URL.")
        avatar_image_400x400_alt = models.URLAttribute("An avatar image for the item, 400x400 pixels, which is square 1:1 aspect ratio and the same size as other popular social networks, and will look good within a circle mask, as an alternate text description.")
        main_image_1080x1080_url = models.URLAttribute("A main image for the item, 1080x1080 pixels, which is square 1:1 aspect ratio, as a URL.")
        main_image_1080x1080_alt = models.TextAttribute("A main image for the item, 1080x1080 pixels, which is square 1:1 aspect ratio, as an alternate text description.")
        main_image_1920x1080_url = models.URLAttribute("A main image for the item, 1920x1080 pixels, which is landscape aspect ratio, as a URL.")
        main_image_1920x1080_alt = models.TextAttribute("A main image for the item, 1920x1080 pixels, which is landscape aspect ratio, as an alternate text description.")
        main_image_1080x1920_url = models.URLAttribute("A main image for the item, 1920x1080 pixels, which is landscape aspect ratio, as a URL.")
        main_image_1080x1920_alt = models.TextAttribute("A main image for the item, 1920x1080 pixels, which is landscape aspect ratio, as an alternate text description.")
        emoji = models.TextAttribute("Any emoji related to the item, such as for a badge, or indicator, or expression, etc.")
        star_count = models.IntegerAttribute("A star count from 0-5, such as for a rating, or review, or priority, etc.")
        quick_response_code_id = models.ForeignKey("A quick-response (QR) code that uniquely identifies this card.", QuickResponseCodeId, on_delete=models.CASCADE)("A quick-response (QR) code that uniquely identifies this card.")
        universal_product_code_id = models.ForeignKey("A universal product code (UPC) that uniquely identifies this card.", UniversalProductCodeId, on_delete=models.CASCADE)("A universal product code (UPC) that uniquely identifies this card.")
        plan_id = models.ForeignKey("None", PlanId, on_delete=models.CASCADE)("None")
        specific_card_id = models.ForeignKey("Specific: target one area clearly and precisely.", SpecificCardId, on_delete=models.CASCADE)("Specific: target one area clearly and precisely.")
        measurable_card_id = models.ForeignKey("Measurable: quantify progress toward success by using metrics.", MeasurableCardId, on_delete=models.CASCADE)("Measurable: quantify progress toward success by using metrics.")
        achievable_card_id = models.ForeignKey("Achievable: able to start, able to continue, and able to accomplish.", AchievableCardId, on_delete=models.CASCADE)("Achievable: able to start, able to continue, and able to accomplish.")
        relevant_card_id = models.ForeignKey("Relevant: closely connected to what's happening and being considered.", RelevantCardId, on_delete=models.CASCADE)("Relevant: closely connected to what's happening and being considered.")
        timely_card_id = models.ForeignKey("Timely: occurring at a favorable or useful time and opportune.", TimelyCardId, on_delete=models.CASCADE)("Timely: occurring at a favorable or useful time and opportune.")

