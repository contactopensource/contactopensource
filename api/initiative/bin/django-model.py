#!/bin/sh
set -euf

class Initiative(models.Model):
        id = models.UUIDAttribute("Primary key id that is a secure-random 32-character lowercase hexadecimal, optimized for zero information rather than speed and memory; you can show this id to users.")
        lock_version = models.IntegerAttribute("This is for optimistic locking.")
        created_at = models.UnknownAttribute("The time when this happened.")
        created_by = models.URLAttribute("The user/agent/service/etc. that did this.")
        updated_at = models.UnknownAttribute("The time when this happened.")
        updated_by = models.URLAttribute("The user/agent/service/etc. that did this.")
        retired_at = models.UnknownAttribute("The time when this happened.")
        retired_by = models.URLAttribute("The user/agent/service/etc. that did this.")
        locale_code = models.TextAttribute("An international locale identifier, such as the id of locale "English - United States".")
        tagging = models.TextAttribute("A tagging list that is space-separated and without any hash marks.")
        name = models.UnknownAttribute("The card name a.k.a. card title, typically displayed in large font size on the card, such as a H1 headline, or a person's name.")
        subname = models.UnknownAttribute("The card subname a.k.a. card subtitle, typically displayed medium font size on the card, such as a H2 headline, or a person's handle.")
        summary = models.UnknownAttribute("None")
        description = models.TextAttribute("None")
        disambiguation = models.TextAttribute("None")
        sign = models.UnknownAttribute("An option one-character sign, such as an emoji indicator.")
        kind = models.TextAttribute("A category class, such as a useful way to sort or subset the resource.")
        avatar_image_400x400_url = models.URLAttribute("An avatar image for the item, 400x400 pixels, which is square 1:1 aspect ratio and the same size as other popular social networks, and will look good within a circle mask, as a URL.")
        avatar_image_400x400_alt = models.URLAttribute("An avatar image for the item, 400x400 pixels, which is square 1:1 aspect ratio and the same size as other popular social networks, and will look good within a circle mask, as an alternate text description.")
        main_image_1080x1080_url = models.URLAttribute("A main image for the item, 1080x1080 pixels, which is square 1:1 aspect ratio, as a URL.")
        main_image_1080x1080_alt = models.TextAttribute("A main image for the item, 1080x1080 pixels, which is square 1:1 aspect ratio, as an alternate text description.")
        main_image_1920x1080_url = models.URLAttribute("A main image for the item, 1920x1080 pixels, which is landscape aspect ratio, as a URL.")
        main_image_1920x1080_alt = models.TextAttribute("A main image for the item, 1920x1080 pixels, which is landscape aspect ratio, as an alternate text description.")
        main_image_1080x1920_url = models.URLAttribute("A main image for the item, 1920x1080 pixels, which is landscape aspect ratio, as a URL.")
        main_image_1080x1920_alt = models.TextAttribute("A main image for the item, 1920x1080 pixels, which is landscape aspect ratio, as an alternate text description.")
        emoji = models.TextAttribute("Any emoji related to the item, such as for a badge, or indicator, or expression, etc.")
        star_count = models.IntegerAttribute("A star count from 0-5, such as for a rating, or review, or priority, etc.")
        quick_response_code_id = models.ForeignKey("A quick-response (QR) code that uniquely identifies this card.", QuickResponseCodeId, on_delete=models.CASCADE)("A quick-response (QR) code that uniquely identifies this card.")
        universal_product_code_id = models.ForeignKey("A universal product code (UPC) that uniquely identifies this card.", UniversalProductCodeId, on_delete=models.CASCADE)("A universal product code (UPC) that uniquely identifies this card.")
        status = models.TextAttribute("Status")
        tagging = models.TextAttribute("Tagging")
        url = models.URLAttribute("None")
        email = models.TextAttribute("None")
        phone = models.TextAttribute("None")
        messaging = models.TextAttribute("None")
        postal = models.TextAttribute("None")
        orcid_pid = models.TextAttribute("None")
        rdf_type = models.TextAttribute("None")
        linkedin_url = models.URLAttribute("None")
        github_url = models.URLAttribute("None")
        codeberg_url = models.URLAttribute("None")
        agents_as_url = models.URLAttribute("None")
        agents_as_markdown = models.UnknownAttribute("None")
        home_emoji_url = models.URLAttribute("None")
        bellhop_bell_emoji_url = models.URLAttribute("None")
        target_emoji_url = models.URLAttribute("None")
        gear_emoji_url = models.URLAttribute("None")
        spiral_calendar_emoji_url = models.URLAttribute("None")
        sparkles_emoji_url = models.URLAttribute("None")
        speech_bubble_emoji_url = models.URLAttribute("None")
        newspaper_emoji_url = models.URLAttribute("None")
        bar_chart_emoji_url = models.URLAttribute("None")
        movie_camera_emoji_url = models.URLAttribute("None")
        construction_worker_emoji_url = models.URLAttribute("None")
        crystal_ball_emoji_url = models.URLAttribute("None")
        butterfly_emoji_url = models.URLAttribute("None")
        lady_beetle_emoji_url = models.URLAttribute("None")
        note = models.TextAttribute("None")
        email_distribution_list = models.TextAttribute("None")
        daisyui_timeline_html = models.TextAttribute("None")
        org_mode = models.TextAttribute("None")
        task_list_as_markdown = models.UnknownAttribute("None")
        ways_of_working_as_markdown = models.UnknownAttribute("None")
        objectives_and_key_results_as_url = models.URLAttribute("None")
        objectives_and_key_results_as_markdown = models.UnknownAttribute("None")
        key_performance_indicators_as_url = models.UnknownAttribute("None")
        key_performance_indicators_as_markdown = models.UnknownAttribute("None")
        glossary_as_url = models.URLAttribute("None")
        glossary_as_markdown = models.UnknownAttribute("None")
        code_of_conduct_url = models.URLAttribute("None")
        code_of_conduct_as_markdown = models.UnknownAttribute("None")
        license_url = models.URLAttribute("None")
        license_as_markdown = models.UnknownAttribute("None")
        arc42_as_url = models.URLAttribute("None")
        arc42_as_markdown = models.UnknownAttribute("None")
        explain_stakeholders_as_markdown = models.UnknownAttribute("None")
        explain_history_as_markdown = models.UnknownAttribute("None")
        explain_authentication_as_markdown = models.UnknownAttribute("None")
        explain_authorization_as_markdown = models.UnknownAttribute("None")
        explain_use_cases_as_markdown = models.UnknownAttribute("None")
        explain_demographics_as_markdown = models.UnknownAttribute("None")
        explain_ui_as_markdown = models.UnknownAttribute("None")
        explain_api_as_markdown = models.UnknownAttribute("None")
        explain_data_as_markdown = models.UnknownAttribute("None")
        explain_mobile_as_markdown = models.UnknownAttribute("None")
        explain_legal_as_markdown = models.UnknownAttribute("None")
        explain_financial_as_markdown = models.UnknownAttribute("None")
        explain_service_level_agreement_as_markdown = models.UnknownAttribute("None")
        explain_disaster_recovery_as_markdown = models.UnknownAttribute("None")
        apache_echart_as_url = models.URLAttribute("None")
        apache_echart_as_typescript = models.TextAttribute("None")
        six_pager_double_sider_as_url = models.URLAttribute("Six-pager double-sider explanation, as URL")
        six_pager_double_sider_as_markdown = models.UnknownAttribute("Six-pager double-sider explanation, as markdown")
        swot_as_url = models.URLAttribute("Strengths Weaknesses Opportunities Threats (SWOT), as URL")
        swot_as_markdown = models.UnknownAttribute("Strengths Weaknesses Opportunities Threats (SWOT), as markdown")
        porters_five_forces_as_url = models.URLAttribute("Porter's Five Forces, as URL")
        porters_five_forces_as_markdown = models.UnknownAttribute("Porter's Five Forces, as markdown")
        pestle_as_url = models.URLAttribute("Political, Economic, Sociological, Technological, Legal, Environmental (PESTLE), as URL")
        pestle_as_markdown = models.UnknownAttribute("Political, Economic, Sociological, Technological, Legal, Environmental (PESTLE), as markdown")
        roles_and_responsibilities_as_url = models.URLAttribute("Roles and Responsibilities, as URL")
        roles_and_responsibilities_as_markdown = models.UnknownAttribute("Roles and Responsibilities, as markdown")
        responsibility_assignment_matrix_as_url = models.URLAttribute("Responsibility Assignment Matrix (RAM) such as a RASCIO Matrix, as URL")
        responsibility_assignment_matrix_as_markdown = models.UnknownAttribute("Responsibility Assignment Matrix (RAM) such as a RASCIO Matrix, as markdown")
        quality_availability_as_url = models.URLAttribute("Quality documentation about availability, as URL")
        quality_availability_as_markdown = models.UnknownAttribute("Quality documentation about availability, as markdown")
        quality_certifiability_as_url = models.URLAttribute("Quality documentation about certifiability, as URL")
        quality_certifiability_as_markdown = models.UnknownAttribute("Quality documentation about certifiability, as markdown")
        quality_compatibility_as_url = models.URLAttribute("Quality documentation about compatibility, as URL")
        quality_compatibility_as_markdown = models.UnknownAttribute("Quality documentation about compatibility, as markdown")
        quality_efficiency_as_url = models.URLAttribute("Quality documentation about efficiency, as URL")
        quality_efficiency_as_markdown = models.UnknownAttribute("Quality documentation about efficiency, as markdown")
        quality_governability_as_url = models.URLAttribute("Quality documentation about governability, as URL")
        quality_governability_as_markdown = models.UnknownAttribute("Quality documentation about governability, as markdown")
        quality_maintainability_as_url = models.URLAttribute("Quality documentation about maintainability, as URL")
        quality_maintainability_as_markdown = models.UnknownAttribute("Quality documentation about maintainability, as markdown")
        quality_observability_as_url = models.UnknownAttribute("Quality documentation about observability, as URL")
        quality_observability_as_markdown = models.UnknownAttribute("Quality documentation about observability, as markdown")
        quality_operability_as_markdown = models.URLAttribute("Quality documentation about operability, as URL")
        quality_operability_as_markdown = models.UnknownAttribute("Quality documentation about operability, as markdown")
        quality_recoverability_as_url = models.URLAttribute("Quality documentation about recoverability, as URL")
        quality_recoverability_as_markdown = models.UnknownAttribute("Quality documentation about recoverability, as markdown")
        quality_scalability_as_url = models.URLAttribute("Quality documentation about scalability, as URL")
        quality_scalability_as_markdown = models.UnknownAttribute("Quality documentation about scalability, as markdown")
        quality_security_as_url = models.URLAttribute("Quality documentation about security, as URL")
        quality_security_as_markdown = models.UnknownAttribute("Quality documentation about security, as markdown")
        quality_suitability_as_url = models.UnknownAttribute("Quality documentation about suitability, as URL")
        quality_suitability_as_markdown = models.UnknownAttribute("Quality documentation about suitability, as markdown")
        quality_testability_as_url = models.URLAttribute("Quality documentation about testability, as URL")
        quality_testability_as_markdown = models.UnknownAttribute("Quality documentation about testability, as markdown")
        quality_transferability_as_url = models.URLAttribute("Quality documentation about transferability, as URL")
        quality_transferability_as_markdown = models.UnknownAttribute("Quality documentation about transferability, as markdown")
        quality_translatability_as_url = models.URLAttribute("Quality documentation about translatability, as URL")
        quality_translatability_as_markdown = models.UnknownAttribute("Quality documentation about translatability, as markdown")
        quality_warrantability_as_url = models.URLAttribute("Quality documentation about warrantability, as URL")
        quality_warrantability_as_markdown = models.UnknownAttribute("Quality documentation about warrantability, as markdown")
        burn_rate_net_cash_per_week_actual = models.UnknownAttribute("Burn rate net cash per week actual value")
        burn_rate_net_cash_per_week_target = models.UnknownAttribute("Burn rate net cash per week target value")
        burn_rate_net_cash_per_week_ratio = models.UnknownAttribute("Burn rate net cash per week ratio = (actual / target)")
        burn_rate_net_cash_per_week_unit = models.TextAttribute("Burn rate net cash per week unit")
        burn_rate_net_cash_per_week_description = models.TextAttribute("Burn rate net cash per week description")
        burn_rate_net_time_per_week_actual = models.UnknownAttribute("Burn rate net time per week actual value")
        burn_rate_net_time_per_week_target = models.UnknownAttribute("Burn rate net time per week target value")
        burn_rate_net_time_per_week_ratio = models.UnknownAttribute("Burn rate net time per week ratio = (actual / target)")
        burn_rate_net_time_per_week_unit = models.TextAttribute("Burn rate net time per week unit")
        burn_rate_net_time_per_week_description = models.TextAttribute("Burn rate net time per week description")
        net_promoter_score_customer_perspective_actual = models.UnknownAttribute("Net Promoter Score (NPS) customer perspective, actual value")
        net_promoter_score_customer_perspective_expect = models.UnknownAttribute("Net Promoter Score (NPS) customer perspective, expect value")
        net_promoter_score_customer_perspective_ratio = models.UnknownAttribute("Net Promoter Score (NPS) customer perspective, ratio = (actual / expect)")
        net_promoter_score_customer_perspective_unit = models.TextAttribute("Net Promoter Score (NPS) customer perspective, unit")
        net_promoter_score_customer_perspective_description_as_markdown = models.TextAttribute("Net Promoter Score (NPS) customer perspective, description as markdown")
        net_promoter_score_user_perspective_actual = models.UnknownAttribute("Net Promoter Score (NPS) user perspective, actual value")
        net_promoter_score_user_perspective_expect = models.UnknownAttribute("Net Promoter Score (NPS) user perspective, expect value")
        net_promoter_score_user_perspective_ratio = models.UnknownAttribute("Net Promoter Score (NPS) user perspective, ratio = (actual / expect)")
        net_promoter_score_user_perspective_unit = models.TextAttribute("Net Promoter Score (NPS) user perspective, unit")
        net_promoter_score_user_perspective_description_as_markdown = models.TextAttribute("Net Promoter Score (NPS) user perspective, description as markdown")
        net_promoter_score_worker_perspective_actual = models.UnknownAttribute("Net Promoter Score (NPS) worker perspective, actual value")
        net_promoter_score_worker_perspective_expect = models.UnknownAttribute("Net Promoter Score (NPS) worker perspective, expect value")
        net_promoter_score_worker_perspective_ratio = models.UnknownAttribute("Net Promoter Score (NPS) worker perspective, ratio = (actual / expect)")
        net_promoter_score_worker_perspective_unit = models.TextAttribute("Net Promoter Score (NPS) worker perspective, unit")
        net_promoter_score_worker_perspective_description_as_markdown = models.TextAttribute("Net Promoter Score (NPS) worker perspective, description as markdown")
        earned_value_management_planned_value = models.UnknownAttribute("Earned Value Management (EVM) Planned Value (PV)")
        earned_value_management_earned_value = models.UnknownAttribute("Earned Value Management (EVM) Earned Value (EV)")
        earned_value_management_actual_cost = models.UnknownAttribute("Earned Value Management (EVM) Actual Cost (AC)")
        earned_value_management_cost_variance = models.UnknownAttribute("Earned Value Management (EVM) Cost Variance (CV)

- Cost Variance (CV) = Earned Value (EV) – Actual Cost (AC)

- Positive: ahead of budget a.k.a. cost underrun

- Negative: behind budget a.k.a. cost overrun")
        earned_value_management_cost_variance_ratio = models.UnknownAttribute("Earned Value Management (EVM) Cost Variance Ratio (CVR)")
        earned_value_management_cost_performance_index = models.UnknownAttribute("Earned Value Management (EVM) Cost Performance Index (CVI)

- Cost Performance Index (CPI) = Earned Value (EV) / Actual Cost (AC)

- Positive: cost is less than budgeted

- Negative: cost is greater than budgeted")
        earned_value_management_schedule_variance = models.UnknownAttribute("Earned Value Management (EVM) Schedule Variance (SV)

- Schedule Variance (SV) = Earned Value (EV) – Planned Value (PV)

- Positive: ahead of schedule a.k.a. time underrun

- Negative: behind schedule a.,k.a. time overrun")
        earned_value_management_schedule_variance_ratio = models.UnknownAttribute("Earned Value Management (EVM) Schedule Variance Ratio (SVR)")
        earned_value_management_schedule_performance_index = models.UnknownAttribute("Earned Value Management (EVM) Schedule Performance Index (SPI)

- Schedule Performance Index (SPI) = Earned Value (EV) / Planned Value (PV)

- Positive: ahead of schedule

- Negative: behind schedule")
        total_project_control_dipp = models.UnknownAttribute("Total Project Control (TPC) Devaux's Index of Project Performance (DIPP)")
        total_project_control_dipp_progress_index_ratio = models.UnknownAttribute("Total Project Control (TPC) Devaux's Index of Project Performance (DIPP) Progress Index (PI)")
        total_project_control_dipp_progress_index_numerator = models.UnknownAttribute("Total Project Control (TPC) Devaux's Index of Project Performance (DIPP) Progress Index (PI) Numerator")
        total_project_control_dipp_progress_index_denominator = models.UnknownAttribute("Total Project Control (TPC) Devaux's Index of Project Performance (DIPP) Progress Index (PI) Denominator")
        total_project_control_expected_monetary_value = models.UnknownAttribute("Total Project Control (TPC) Expected Monetary Value (EMV)")
        total_project_control_cost_estimate_to_complete = models.UnknownAttribute("Total Project Control (TPC) Cost Estimate to Complete (CEC)")
        active_users_actual = models.UnknownAttribute("Active users actual value")
        active_users_target = models.UnknownAttribute("Active users target value")
        active_users_ratio = models.UnknownAttribute("Active users ratio = (actual / target)")
        active_users_unit = models.TextAttribute("Active users unit")
        active_users_description = models.TextAttribute("Active users description")
        uptime_percentage_actual = models.UnknownAttribute("Uptime percentage actual value")
        uptime_percentage_target = models.UnknownAttribute("Uptime percentage target value")
        uptime_percentage_ratio = models.UnknownAttribute("Uptime percentage ratio = (actual / target)")
        uptime_percentage_unit = models.TextAttribute("Uptime percentage unit")
        uptime_percentage_description = models.TextAttribute("Uptime percentage description")
        maintainability_index_actual = models.UnknownAttribute("Maintainability index actual value")
        maintainability_index_target = models.UnknownAttribute("Maintainability index target value")
        maintainability_index_ratio = models.UnknownAttribute("Maintainability index ration (actual / target)")
        maintainability_index_unit = models.TextAttribute("Maintainability index unit")
        maintainability_index_description = models.TextAttribute("Maintainability index description")
        line_count_actual = models.UnknownAttribute("Line count actual value")
        line_count_target = models.UnknownAttribute("Line count target value")
        line_count_ratio = models.UnknownAttribute("Line count ratio = (actual / target)")
        line_count_unit = models.TextAttribute("Line count unit")
        line_count_description = models.TextAttribute("Line count description")
        test_automation_code_coverage_actual = models.UnknownAttribute("Test automation code coverage actual value")
        test_automation_code_coverage_target = models.UnknownAttribute("Test automation code coverage target value")
        test_automation_code_coverage_ratio = models.UnknownAttribute("Test automation code coverage ratio = (actual / target)")
        test_automation_code_coverage_unit = models.TextAttribute("Test automation code coverage unit")
        test_automation_code_coverage_description = models.TextAttribute("Test automation code coverage description")
        halstead_complexity_volume_actual = models.UnknownAttribute("Halstead complexity volume actual value")
        halstead_complexity_volume_target = models.UnknownAttribute("Halstead complexity target value")
        halstead_complexity_volume_ratio = models.UnknownAttribute("Halstead complexity volume ratio = (actual / target)")
        halstead_complexity_volume_unit = models.TextAttribute("Halstead complexity volume unit")
        halstead_complexity_volume_description = models.TextAttribute("Halstead complexity volume description")
        halstead_complexity_difficulty_actual = models.UnknownAttribute("Halstead complexity difficulty actual value")
        halstead_complexity_difficulty_target = models.UnknownAttribute("Halstead complexity difficulty target value")
        halstead_complexity_difficulty_ratio = models.UnknownAttribute("Halstead complexity difficulty ratio = (actual / target)")
        halstead_complexity_difficulty_unit = models.TextAttribute("Halstead complexity difficulty unit")
        halstead_complexity_difficulty_description = models.TextAttribute("Halstead complexity difficulty description")
        halstead_complexity_effort_actual = models.UnknownAttribute("Halstead complexity effort actual value")
        halstead_complexity_effort_target = models.UnknownAttribute("Halstead complexity effort target value")
        halstead_complexity_effort_ratio = models.UnknownAttribute("Halstead complexity effort ratio = (actual / target)")
        halstead_complexity_effort_unit = models.UnknownAttribute("Halstead complexity effort unit")
        halstead_complexity_effort_description = models.UnknownAttribute("Halstead complexity effort description")
        deployment_frequency_actual = models.UnknownAttribute("Deployment frequency actual value")
        deployment_frequency_target = models.UnknownAttribute("Deployment frequency target value")
        deployment_frequency_ratio = models.UnknownAttribute("Deployment frequency ratio = (actual / target)")
        deployment_frequency_unit = models.TextAttribute("Deployment frequency unit")
        deployment_frequency_description = models.TextAttribute("deployment frequency description")
        lead_time_for_changes_actual = models.UnknownAttribute("Lead time for changes actual value")
        lead_time_for_changes_target = models.UnknownAttribute("Lead time for changes target value")
        lead_time_for_changes_ratio = models.UnknownAttribute("Lead time for changes ratio = (actual / target)")
        lead_time_for_changes_unit = models.TextAttribute("Lead time for changes unit")
        lead_time_for_changes_description = models.TextAttribute("Lead time for changes description")
        change_failure_rate_actual = models.UnknownAttribute("Change failure rate actual value")
        change_failure_rate_target = models.UnknownAttribute("Change failure rate target value")
        change_failure_rate_ratio = models.UnknownAttribute("Change failure rate ratio = (actual / target)")
        change_failure_rate_unit = models.TextAttribute("Change failure rate unit")
        change_failure_rate_description = models.TextAttribute("Change failure rate description")
        mean_time_to_recovery_actual = models.UnknownAttribute("Mean time to recovery actual value")
        mean_time_to_recovery_target = models.UnknownAttribute("Mean time to recovery target value")
        mean_time_to_recovery_ratio = models.UnknownAttribute("Mean time to recovery (actual / target)")
        mean_time_to_recovery_unit = models.TextAttribute("Mean time to recovery unit")
        mean_time_to_recovery_description = models.TextAttribute("Mean time to recovery description")

