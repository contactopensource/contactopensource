#!/bin/sh
set -euf

class Codec(models.Model):
        id = models.UUIDAttribute("Primary key id that is a secure-random 32-character lowercase hexadecimal, optimized for zero information rather than speed and memory; you can show this id to users.")
        lock_version = models.IntegerAttribute("This is for optimistic locking.")
        created_at = models.UnknownAttribute("None")
        created_by = models.URLAttribute("The user/agent/service/etc. that did this.")
        updated_at = models.UnknownAttribute("None")
        updated_by = models.URLAttribute("The user/agent/service/etc. that did this.")
        retired_at = models.UnknownAttribute("None")
        retired_by = models.URLAttribute("The user/agent/service/etc. that did this.")
        locale_id = models.UnknownAttribute("An international locale identifier, such as the id of locale "English - United States".")
        title = models.UnknownAttribute("The card title, typically displayed in large font size on the card, such as a H1 headline, or a person's name, or a project's title.")
        subtitle = models.UnknownAttribute("The card subtitle, typically displayed medium font size on the card, such as a H2 headline, or a person's handle, or a project's status.")
        summary = models.TextAttribute("None")
        description = models.TextAttribute("None")
        disambiguation = models.TextAttribute("None")
        image_1080x1080_url = models.URLAttribute("An image URL for the item, 1080x1080 pixels, which is square 1:1 aspect ratio.")
        image_1080x1080_alt = models.TextAttribute("An image URL alternative text description")
        emoji = models.TextAttribute("Any emoji related to the item, such as for a badge, or indicator, or expression, etc.")
        star_count = models.IntegerAttribute("A star count from 0-5, such as for a rating, or review, or priority, etc.")
        name = models.TextAttribute("name")
        code = models.TextAttribute("code")
        icon = models.TextAttribute("icon")
        link = models.TextAttribute("link")
        note = models.TextAttribute("note")
        creator_name = models.TextAttribute("creator name")
        prefer_file_extension = models.TextAttribute("prefer file extension")
        prefer_media_type_id = models.UnknownAttribute("prefer media type id")
        lossy_flag = models.UnknownAttribute("true = lossy encoding; false = lossless encoding")
        floss_flag = models.UnknownAttribute("floss flag")
        fixed_bit_rate = models.UnknownAttribute("fixed bit rate")
        variable_bit_rate_minimum = models.UnknownAttribute("variable bit rate minimum")
        variable_bit_rate_maximum = models.UnknownAttribute("variable bit rate maximum")
        fixed_channel_count = models.IntegerAttribute("fixed channel count")
        variable_channel_count_minimum = models.IntegerAttribute("variable channel count minimum")
        variable_channel_count_maximum = models.IntegerAttribute("variable channel count maximum")

