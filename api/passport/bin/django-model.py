#!/bin/sh
set -euf

class Passport(models.Model):
        id = models.UUIDAttribute("Primary key id that is a secure-random 32-character lowercase hexadecimal, optimized for zero information rather than speed and memory; you can show this id to users.")
        lock_version = models.IntegerAttribute("This is for optimistic locking.")
        created_at = models.UnknownAttribute("The time when this happened.")
        created_by = models.URLAttribute("The user/agent/service/etc. that did this.")
        updated_at = models.UnknownAttribute("The time when this happened.")
        updated_by = models.URLAttribute("The user/agent/service/etc. that did this.")
        retired_at = models.UnknownAttribute("The time when this happened.")
        retired_by = models.URLAttribute("The user/agent/service/etc. that did this.")
        locale_code = models.TextAttribute("An international locale identifier, such as the id of locale "English - United States".")
        tagging = models.TextAttribute("A tagging list that is space-separated and without any hash marks.")
        name = models.UnknownAttribute("The card name a.k.a. card title, typically displayed in large font size on the card, such as a H1 headline, or a person's name.")
        subname = models.UnknownAttribute("The card subname a.k.a. card subtitle, typically displayed medium font size on the card, such as a H2 headline, or a person's handle.")
        summary = models.UnknownAttribute("None")
        description = models.TextAttribute("None")
        disambiguation = models.TextAttribute("None")
        sign = models.UnknownAttribute("An option one-character sign, such as an emoji indicator.")
        kind = models.TextAttribute("A category class, such as a useful way to sort or subset the resource.")
        avatar_image_400x400_url = models.URLAttribute("An avatar image for the item, 400x400 pixels, which is square 1:1 aspect ratio and the same size as other popular social networks, and will look good within a circle mask, as a URL.")
        avatar_image_400x400_alt = models.URLAttribute("An avatar image for the item, 400x400 pixels, which is square 1:1 aspect ratio and the same size as other popular social networks, and will look good within a circle mask, as an alternate text description.")
        main_image_1080x1080_url = models.URLAttribute("A main image for the item, 1080x1080 pixels, which is square 1:1 aspect ratio, as a URL.")
        main_image_1080x1080_alt = models.TextAttribute("A main image for the item, 1080x1080 pixels, which is square 1:1 aspect ratio, as an alternate text description.")
        main_image_1920x1080_url = models.URLAttribute("A main image for the item, 1920x1080 pixels, which is landscape aspect ratio, as a URL.")
        main_image_1920x1080_alt = models.TextAttribute("A main image for the item, 1920x1080 pixels, which is landscape aspect ratio, as an alternate text description.")
        main_image_1080x1920_url = models.URLAttribute("A main image for the item, 1920x1080 pixels, which is landscape aspect ratio, as a URL.")
        main_image_1080x1920_alt = models.TextAttribute("A main image for the item, 1920x1080 pixels, which is landscape aspect ratio, as an alternate text description.")
        emoji = models.TextAttribute("Any emoji related to the item, such as for a badge, or indicator, or expression, etc.")
        star_count = models.IntegerAttribute("A star count from 0-5, such as for a rating, or review, or priority, etc.")
        quick_response_code_id = models.ForeignKey("A quick-response (QR) code that uniquely identifies this card.", QuickResponseCodeId, on_delete=models.CASCADE)("A quick-response (QR) code that uniquely identifies this card.")
        universal_product_code_id = models.ForeignKey("A universal product code (UPC) that uniquely identifies this card.", UniversalProductCodeId, on_delete=models.CASCADE)("A universal product code (UPC) that uniquely identifies this card.")
        name_of_holder = models.TextAttribute("Name of holder")
        nationality = models.TextAttribute("Nationality")
        date_of_birth = models.DateAttribute("Date of birth")
        date_of_birth_check_digit = models.UnknownAttribute("Date of birth check digit")
        sex = models.TextAttribute("Sex")
        composite_check_digit = models.UnknownAttribute("Composite check digit")
        document_type = models.TextAttribute("Document type")
        document_number = models.TextAttribute("Document number")
        document_number_check_digit = models.UnknownAttribute("Document number check digit")
        issuing_state_or_organization = models.TextAttribute("Issuing state or organization")
        date_of_expiry_or_valid_until_date = models.DateAttribute("Date of expiry or valid until date")
        date_of_expiry_or_valid_until_date_check_digit = models.UnknownAttribute("Date of expiry or valid until date check digit")
        optional_data = models.TextAttribute("Optional data")
        optional_data_check_digit = models.UnknownAttribute("Optional data check digit")
        encoded_face = models.BinaryAttribute("Encoded face. This is a binary file of the holder's face.")
        encoded_fingers = models.BinaryAttribute("Encoded finger(s). This is a binary file of the holder's fingerprint(s).")
        encoded_eyes = models.BinaryAttribute("Encoded eyes.  This is a binary file of the holder's eye(s).")
        displayed_portrait = models.BinaryAttribute("Displayed portrait")
        reserved_for_future_use = models.UnknownAttribute("Reserved for future use")
        displayed_signature_or_usual_mark = models.BinaryAttribute("Displayed signature or usual mark. This is an image of the holder's signature or equivalent usual mark such as an X.")
        data_features = models.UnknownAttribute("Data features.")
        structure_features = models.UnknownAttribute("Structure features.")
        substance_features = models.UnknownAttribute("Substance features.")
        other_names_of_holder = models.TextAttribute("Other names of holder.")
        place_of_birth = models.TextAttribute("Place of birth.")
        personal_number = models.TextAttribute("Personal number.")
        address = models.TextAttribute("Address.")
        telephone_numbers = models.TextAttribute("Telephone number(s).")
        profession = models.TextAttribute("Profession.")
        title = models.TextAttribute("Title.")
        personal_summary = models.TextAttribute("Personal summary.")
        proof_of_citizenship = models.TextAttribute("Proof of citizenship.")
        other_valid_travel_documents = models.TextAttribute("Other valid travel documents.")
        custody_information = models.TextAttribute("Custody information.")
        issuing_authority = models.TextAttribute("Issuing authority.")
        date_of_issue = models.DateAttribute("Date of issue.")
        other_persons_included_on_mrtd = models.TextAttribute("Other persons included on MRTD.")
        endorsements_observations = models.TextAttribute("Endorsements observations.")
        tax_exit_requirements = models.TextAttribute("Tax exit requirements.")
        image_of_front_of_mrtd = models.BinaryAttribute("Image of front of machine-readable travel document (MRTD).")
        image_of_rear_of_mrtd = models.BinaryAttribute("Image of rear of machine-readable travel document (MRTD).")
        optional_details = models.TextAttribute("Optional details.")
        security_options = models.UnknownAttribute("Security options.")
        active_authentication_public_key_info = models.UnknownAttribute("Active authentication public key info.")
        persons_to_notify = models.TextAttribute("Person(s) to notify.")
        contact_details_of_persons_to_notify = models.TextAttribute("1-415-555-5556")
        country_id = models.ForeignKey("The country id suitable for index lookups.", CountryId, on_delete=models.CASCADE)("The country id suitable for index lookups.")
        four_corner_open_book_photo_url = models.URLAttribute("Link to a photo that clearly shows the four corner perspective of the passport, specifically with the passport open so it shows the holder information and holder signature. This is suitable for a government verification, or background check, or security approval, etc.")
        four_corner_clear_face_open_book_photo_url = models.URLAttribute("Link to a photo that clearly shows the four corner perspective of the passport, specifically with a clear face view of the holder holding the passport, specifically with the passport open so it shows the holder information and holder signature. This is suitable for a government verification, or background check, or security approval, etc.")

