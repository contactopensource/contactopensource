#!/bin/sh
set -euf

class Person(models.Model):
        id = models.UUIDAttribute("Primary key id that is a secure-random 32-character lowercase hexadecimal, optimized for zero information rather than speed and memory; you can show this id to users.")
        lock_version = models.IntegerAttribute("This is for optimistic locking.")
        created_at = models.UnknownAttribute("The time when this happened.")
        created_by = models.URLAttribute("The user/agent/service/etc. that did this.")
        updated_at = models.UnknownAttribute("The time when this happened.")
        updated_by = models.URLAttribute("The user/agent/service/etc. that did this.")
        deleted_at = models.UnknownAttribute("The time when this happened.")
        deleted_by = models.URLAttribute("The user/agent/service/etc. that did this.")
        locale_code = models.TextAttribute("An international locale identifier, such as the id of locale "English - United States".")
        tagging = models.TextAttribute("A tagging list that is space-separated and without any hash marks.")
        name = models.UnknownAttribute("The card name a.k.a. card title, typically displayed in large font size on the card, such as a H1 headline, or a person's name.")
        subname = models.UnknownAttribute("The card subname a.k.a. card subtitle, typically displayed medium font size on the card, such as a H2 headline, or a person's handle.")
        summary = models.UnknownAttribute("None")
        description = models.TextAttribute("None")
        disambiguation = models.TextAttribute("None")
        sign = models.UnknownAttribute("An option one-character sign, such as an emoji indicator.")
        kind = models.TextAttribute("A category class, such as a useful way to sort or subset the resource.")
        avatar_image_400x400_url = models.URLAttribute("An avatar image for the item, 400x400 pixels, which is square 1:1 aspect ratio and the same size as other popular social networks, and will look good within a circle mask, as a URL.")
        avatar_image_400x400_alt = models.URLAttribute("An avatar image for the item, 400x400 pixels, which is square 1:1 aspect ratio and the same size as other popular social networks, and will look good within a circle mask, as an alternate text description.")
        main_image_1080x1080_url = models.URLAttribute("A main image for the item, 1080x1080 pixels, which is square 1:1 aspect ratio, as a URL.")
        main_image_1080x1080_alt = models.TextAttribute("A main image for the item, 1080x1080 pixels, which is square 1:1 aspect ratio, as an alternate text description.")
        main_image_1920x1080_url = models.URLAttribute("A main image for the item, 1920x1080 pixels, which is landscape aspect ratio, as a URL.")
        main_image_1920x1080_alt = models.TextAttribute("A main image for the item, 1920x1080 pixels, which is landscape aspect ratio, as an alternate text description.")
        main_image_1080x1920_url = models.URLAttribute("A main image for the item, 1920x1080 pixels, which is landscape aspect ratio, as a URL.")
        main_image_1080x1920_alt = models.TextAttribute("A main image for the item, 1920x1080 pixels, which is landscape aspect ratio, as an alternate text description.")
        emoji = models.TextAttribute("Any emoji related to the item, such as for a badge, or indicator, or expression, etc.")
        star_count = models.IntegerAttribute("A star count from 0-5, such as for a rating, or review, or priority, etc.")
        quick_response_code_id = models.UnknownAttribute("A quick-response (QR) code that uniquely identifies this card.")
        universal_product_code_id = models.UnknownAttribute("A universal product code (UPC) that uniquely identifies this card.")
        given_name = models.TextAttribute("The person's given name(s), such as the first name in given-middle-family.")
        given_name_phonetic = models.TextAttribute("The person's given name(s) as International Phonetic Alphabet (IPA), such as the first name in given-middle-family.")
        middle_name = models.TextAttribute("The person's middle name(s), such as the inner name in given-middle-family.")
        middle_name_phonetic = models.TextAttribute("The person's middle name(s) as International Phonetic Alphabet (IPA), such as the inner name in given-middle-family.")
        family_name = models.TextAttribute("The person's family name(s), such as the last name in given-middle-family.")
        family_name_phonetic = models.TextAttribute("The person's family name(s) as International Phonetic Alphabet (IPA), such as the last name in given-middle-family.")
        legal_name = models.TextAttribute("The person's legal name(s), such as the full name in given-middle-family.")
        legal_name_phonetic = models.TextAttribute("The person's legal name(s) as International Phonetic Alphabet (IPA), such as the full name in given-middle-family.")
        nickname = models.TextAttribute("The person's nickname, such as for friends and family.")
        nickname_phonetic = models.TextAttribute("The person's nickname as International Phonetic Alphabet (IPA), such as for friends and family.")
        prefix_name = models.TextAttribute("The person's name prefix full text, such Doctor, Reverend, Mix")
        prefix_name_phonetic = models.TextAttribute("The person's name prefix as International Phonetic Alphabet (IPA), such as doctor, reverend, mix")
        suffix_name = models.TextAttribute("The person's name suffix full text, such Junior, Senior, The Third")
        suffix_name_phonetic = models.TextAttribute("The person's name suffix as International Phonetic Alphabet (IPA), such junior, senior, the third.")
        salutation_name = models.TextAttribute("The person's salutation name full text, such as Doctor Adams.")
        salutation_name_phonetic = models.TextAttribute("The person's salutation name as International Phonetic Alphabet (IPA), such as doctor adams.")
        addressee_name = models.TextAttribute("The person's addressee name, such as on a postal letter.")
        addressee_name_phonetic = models.TextAttribute("The person's addressee name as International Phonetic Alphabet (IPA), such as on a postal letter.")
        subject_pronoun = models.TextAttribute("See https://wikipedia.org/wiki/Subject_pronoun")
        object_pronoun = models.TextAttribute("See https://wikipedia.org/wiki/Object_pronoun")
        dependent_possessive_pronoun = models.TextAttribute("See https://wikipedia.org/wiki/Possessive_pronoun")
        independent_possessive_pronoun = models.TextAttribute("See https://wikipedia.org/wiki/Possessive_determiner")
        reflexive_pronoun = models.TextAttribute("See https://wikipedia.org/wiki/Reflexive_pronoun")
        intensive_pronoun = models.TextAttribute("See https://en.wikipedia.org/wiki/Intensive_pronoun")
        disjunctive_pronoun = models.TextAttribute("See https://wikipedia.org/wiki/Disjunctive_pronoun")
        birth_date = models.DateAttribute("None")
        birth_date_year = models.IntegerAttribute("None")
        death_date = models.DateAttribute("None")
        death_date_year = models.IntegerAttribute("None")

