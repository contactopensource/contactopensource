#!/bin/sh
set -euf

class None(models.Model):
        id = models.UnknownAttribute("Primary key id that is optimized for speed; do not show this to users.")
        zid = models.UUIDAttribute("Secure-random 32-character lowercase hexadecimal that is optimized for zero information; you can show this to users.")
        lock_version = models.UnknownAttribute("This is for optimistic locking.")
        created_at = models.UnknownAttribute("None")
        created_by = models.URLAttribute("The user/agent/service/etc. that did this.")
        updated_at = models.UnknownAttribute("None")
        updated_by = models.URLAttribute("The user/agent/service/etc. that did this.")
        retired_at = models.UnknownAttribute("None")
        retired_by = models.URLAttribute("The user/agent/service/etc. that did this.")
        locale_id = models.UnknownAttribute("An international locale identifier, such as the id of locale "English - United States".")
        title = models.UnknownAttribute("The card title, typically displayed in large font size on the card, such as a H1 headline, or a person's name, or a project's title.")
        subtitle = models.UnknownAttribute("The card subtitle, typically displayed medium font size on the card, such as a H2 headline, or a person's handle, or a project's status.")
        summary = models.TextAttribute("None")
        description = models.TextAttribute("None")
        disambiguation = models.TextAttribute("None")
        image_1024x1024_url = models.URLAttribute("An image URL for the item, 1024x1024 pixels, which is square 1:1 aspect ratio.")
        image_1024x1024_alt = models.TextAttribute("An image URL alternative text description")
        emoji = models.TextAttribute("Any emoji related to the item, such as for a badge, or indicator, or expression, etc.")
        star_count = models.IntegerAttribute("A star count from 0-5, such as for a rating, or review, or priority, etc.")
        subject_uri = models.TextAttribute("type identifier, such as an RDF link, or semantic URL, or internal URN")
        subject_database = models.TextAttribute("database identifier, such as a database instance name")
        subject_schema = models.TextAttribute("schema identifier, such as a database instance schema name")
        subject_table = models.TextAttribute("table identifier, such as a database instance schema table name")
        subject_id = models.UnknownAttribute("row identifier, such as a database instance schema table row primary key")
        predicate_uri = models.TextAttribute("type identifier, such as an RDF link, or semantic URL, or internal URN")
        predicate_database = models.TextAttribute("database identifier, such as a database instance name")
        predicate_schema = models.TextAttribute("schema identifier, such as a database instance schema name")
        predicate_table = models.TextAttribute("table identifier, such as a database instance schema table name")
        predicate_id = models.UnknownAttribute("row indentifier, such as a database instance schema table row primary key")
        object_uri = models.TextAttribute("type identifier, such as an RDF link, or semantic URL, or internal URN")
        object_database = models.TextAttribute("database identifier, such as a database instance name")
        object_schema = models.TextAttribute("object schema")
        object_table = models.TextAttribute("table identifier, such as a database instance schema table name")
        object_id = models.UnknownAttribute("row indentifier, such as a database instance schema table row primary key")
        start_at_timestamp_utc = models.UnknownAttribute("start at timestamp utc")
        stop_at_timestamp_utc = models.UnknownAttribute("stop at timestamp utc")
        count = models.IntegerAttribute("any kind of count, and the usage is up to the application")
        unit_interval = models.UnknownAttribute("any kind of unit interval, and the usage is up to the application")
        dual_interval = models.UnknownAttribute("any kind of dual intervale and the usage is up to the application")

